<subsystem xmlns="urn:jboss:domain:messaging-activemq:1.1">
    <server name="default"
            persistence-enabled="${persistence.enabled:false}"
            persist-id-cache="${persist.id.cache:false}"
            persist-delivery-count-before-delivery="${persist.delivery.count.before.delivery:true}"
            id-cache-size="${id.cache.size:102030}"
            page-max-concurrent-io="${page.max.concurrent.io:10}"
            scheduled-thread-pool-max-size="${messaging.scheduled.thread.pool.max.size:6}"
            thread-pool-max-size="${messaging.thread.pool.max.size:5}"
            wild-card-routing-enabled="${wild.card.routing.enabled:false}"
            connection-ttl-override="${connection.ttl.override:5432}"
            async-connection-execution-enabled="${async.connection.execution.enabled:false}">

        <security
                domain="someDomain"
                enabled="${security.enabled:false}"
                invalidation-interval="${security.invalidation.interval:1234}"
                override-in-vm-security="${override.in-vm.security:false}"/>

        <cluster
                user="${messaging.cluster.user.name}"
                password="${messaging.cluster.user.password}"/>

        <management
                address="${management.address:my.management.address}"
                notification-address="${management.notification.address:my.management.notif.address}"
                jmx-enabled="${jmx.management.enabled:false}"
                jmx-domain="${jmx.domain:my.jmx.domain}"/>

        <journal
                type="${journal.type:NIO}"
                buffer-timeout="${journal.buffer.timeout:1357}"
                buffer-size="${journal.buffer.size:2468}"
                sync-transactional="${journal.sync.transactional:false}"
                sync-non-transactional="${journal.sync.non.transactional:true}"
                log-write-rate="${log.journal.write.rate:true}"
                file-size="${journal.file.size:102400}"
                min-files="${journal.min.files:2}"
                compact-percentage="${journal.compact.percentage:83}"
                compact-min-files="${journal.compact.min.files:2}"
                max-io="${journal.max.io:50}"
                create-bindings-dir="${create.bindings.dir:false}"
                create-journal-dir="${create.journal.dir:true}"/>

        <statistics
                enabled="${statistics.enabled:true}"
                message-counter-sample-period="${message.counter.sample.period:7654}"
                message-counter-max-day-history="${message.counter.max.day.history:23}"/>
        <transaction
                timeout="${transaction.timeout:4321}"
                scan-period="${transaction.timeout.scan.period:5432}"/>
        <message-expiry
                scan-period="${message.expiry.scan.period:7654}"
                thread-priority="${message.expiry.thread.priority:7}"/>
        <debug
                perf-blast-pages="${perf.blast.pages:70}"
                run-sync-speed-test="${run.sync.speed.test:false}"
                server-dump-interval="${server.dump.interval:8642}"
                memory-warning-threshold="${memory.warning.threshold:1024}"
                memory-measure-interval="${memory.measure.interval:2048}"/>

        <bindings-directory path="${my.bindings.dir:test}" relative-to="test"/>
        <journal-directory path="${my.journal.dir:test}" relative-to="test"/>
        <large-messages-directory path="${my.largemessages.dir:test}" relative-to="test"/>
        <paging-directory path="${my.paging.dir:test}" relative-to="test"/>

        <queue name="coreQueueA"
               address="${address:addressA}"
               filter="${filter:afilter}"
               durable="${durable:true}"/>

        <queue name="coreQueueB"
               address="addressB"/>

        <security-setting name="#">
            <role name="guest"
                  send="true"
                  consume="true"
                  create-non-durable-queue="true"
                  delete-non-durable-queue="true"/>
            <role name="admin"
                  send="true"
                  consume="true"
                  create-durable-queue="true"
                  delete-durable-queue="true"
                  create-non-durable-queue="true"
                  delete-non-durable-queue="true"
                  manage="true"/>
        </security-setting>

        <address-setting name="#"
                         dead-letter-address="${dead.letter.address:jms.queue.DLQ}"
                         expiry-address="${expiry.address:jms.queue.ExpiryQueue}"
                         expiry-delay="${expiry.delay:12345}"
                         redelivery-delay="${redelivery.delay:0}"
                         redelivery-multiplier="${redelivery.multiplier:1.0}"
                         max-delivery-attempts="${max.delivery.attempts:5}"
                         max-redelivery-delay="${max.redelivery.delay:234}"
                         max-size-bytes="${max.size.bytes:10485760}"
                         page-size-bytes="${page.size.bytes:10485760}"
                         page-max-cache-size="${page.max.cache.size:7}"
                         address-full-policy="${address.full.policy:BLOCK}"
                         message-counter-history-day-limit="${message.counter.history.day.limit:10}"
                         last-value-queue="${last.value.queue:false}"
                         redistribution-delay="${redistribution.delay:0}"
                         send-to-dla-on-no-route="${send.to.dla.on.no.route:false}"/>

        <http-connector name="http"
                        socket-binding="http">
            <param name="batch-delay" value="${batch.delay:50}"/>
        </http-connector>
        <remote-connector name="netty"
                          socket-binding="messaging"/>
        <remote-connector name="netty-throughput"
                          socket-binding="messaging-throughput">
            <param name="batch-delay" value="${batch.delay:50}"/>
        </remote-connector>
        <in-vm-connector name="in-vm"
                         server-id="${my.server-id:0}"/>
        <connector name="myconnector"
                   factory-class="org.hornetq.core.remoting.impl.netty.NettyConnectorFactory">
            <param name="host" value="192.168.1.2"/>
            <param name="port" value="5445"/>
            <param name="key-store-path" value="path/to/server.jks"/>
            <param name="key-store-password" value="${VAULT::server-key::key-store-password::sharedKey}"/>
        </connector>

        <http-acceptor name="http"
                       http-listener="default">
            <param name="batch-delay" value="${batch.delay:50}"/>
        </http-acceptor>
        <remote-acceptor name="netty"
                         socket-binding="messaging"/>
        <remote-acceptor name="netty-throughput"
                         socket-binding="messaging-throughput">
            <param name="batch-delay" value="50"/>
            <param name="direct-deliver" value="false"/>
        </remote-acceptor>
        <in-vm-acceptor name="in-vm"
                        server-id="${my.server-id:0}"/>
        <acceptor name="myacceptor"
                  factory-class="org.hornetq.core.remoting.impl.netty.NettyAcceptorFactory">
            <param name="batch-delay" value="${batch.delay:50}"/>
        </acceptor>

        <broadcast-group name="groupT"
                         jgroups-stack="${jgroups.stack:udp}"
                         jgroups-channel="${jgroups.channel:hq-cluster}"
                         broadcast-period="${broadcast.group.period:1234}"
                         connectors="http, netty"/>
        <broadcast-group name="groupS"
                         socket-binding="group-s-binding"/>

        <discovery-group name="groupT"
                         socket-binding="group-t-binding"/>
        <discovery-group name="groupU"
                         jgroups-stack="${jgroups.stack:udp}"
                         jgroups-channel="${jgroups.channel:hq-cluster}"
                         refresh-timeout="${discovery.group.refresh.timeout:2345}"
                         initial-wait-timeout="${discovery.group.initial.wait.timeout:2345}"/>

        <divert name="testDivert1"
                routing-name="${routing.name:routing}"
                address="${address:address1}"
                forwarding-address="${forwarding.address:forwardingaddress1}"
                filter="${filter:afilter}"
                transformer-class-name="org.jboss.test.Transformer"
                exclusive="${exclusive:true}"/>
        <divert name="testDivert2"
                address="address2"
                forwarding-address="forwardingaddress2"/>

        <bridge name="bridge1"
                queue-name="${queue.name:coreQueueA}"
                forwarding-address="${forwarding.address:forwardingaddress1}"
                ha="${ha:true}"
                filter="${filter:afilter}"
                transformer-class-name="foo.bar"
                min-large-message-size="${min.large.message.size:10240}"
                check-period="${check.period:666}"
                connection-ttl="${connection.tt:36000}"
                retry-interval="${retry.interval:750}"
                retry-interval-multiplier="${retry.interval.multiplier:2}"
                max-retry-interval="${max.retry.interval:3000}"
                reconnect-attempts="${reconnect-attempts:3}"
                reconnect-attempts-on-same-node="${reconnect-attempts-on-same-node:5}"
                use-duplicate-detection="${use.duplicate.detection:true}"
                confirmation-window-size="${confirmation.window.size:350}"
                user="${user:Brian}"
                password="${password:secret}"
                static-connectors="in-vm, netty" />
        <bridge name="bridge2"
                queue-name="coreQueueB"
                discovery-group="groupC" />

        <!--


                <remoting-incoming-interceptors>
            <class-name>foo.bar</class-name>
            <class-name>bar.foo</class-name>
        </remoting-incoming-interceptors>
        <remoting-outgoing-interceptors>
            <class-name>foo.bar</class-name>
            <class-name>bar.foo</class-name>
        </remoting-outgoing-interceptors>

        <cluster-connections>
            <cluster-connection name="cc1">
                <address>${address:cc1-address}</address>
                <connector-ref>netty</connector-ref>
                <check-period>${check.period:2345}</check-period>
                <connection-ttl>${connection.ttl:1234}</connection-ttl>
                <min-large-message-size>${min.large.message.size:10245}</min-large-message-size>
                <call-timeout>${call.timeout:3456}</call-timeout>
                <call-failover-timeout>${call.failover.timeout:7890}</call-failover-timeout>
                <retry-interval>${retry.interval:987}</retry-interval>
                <retry-interval-multiplier>${retry.interval.multiplier:3.0}</retry-interval-multiplier>
                <max-retry-interval>${max.retry.interval:3600}</max-retry-interval>
                <reconnect-attempts>${reconnect.attempts:-1}</reconnect-attempts>
                <use-duplicate-detection>${use.duplicate.detection:true}</use-duplicate-detection>
                <forward-when-no-consumers>${forward.when.no.consumers:true}</forward-when-no-consumers>
                <max-hops>${max.hops:7}</max-hops>
                <confirmation-window-size>${confirmation.windows.size:459}</confirmation-window-size>
                <notification-attempts>${notification.attempts:2}</notification-attempts>
                <notification-interval>${notification.interval:1}</notification-interval>
                <static-connectors>
                    <connector-ref>in-vm</connector-ref>
                    <connector-ref>netty</connector-ref>
                </static-connectors>
            </cluster-connection>
            <cluster-connection name="cc2">
                <address>cc2-address</address>
                <connector-ref>netty</connector-ref>
                <static-connectors allow-direct-connections-only="true">
                    <connector-ref>in-vm</connector-ref>
                    <connector-ref>netty</connector-ref>
                </static-connectors>
            </cluster-connection>
            <cluster-connection name="cc3">
                <address>cc3-address</address>
                <connector-ref>netty</connector-ref>
                <discovery-group-ref discovery-group-name="groupC"/>
            </cluster-connection>
            <cluster-connection name="cc4">
                <address>cc4-address</address>
                <connector-ref>netty-throughput</connector-ref>
                <static-connectors>
                    <connector-ref>in-vm</connector-ref>
                    <connector-ref>netty</connector-ref>
                </static-connectors>
            </cluster-connection>
        </cluster-connections>
        <grouping-handler name="grouping-handler">
            <type>${grouping.type:LOCAL}</type>
            <address>${address:handler-address}</address>
            <timeout>${timeout:5000}</timeout>
            <group-timeout>${group-timeout:1234}</group-timeout>
            <reaper-period>${reaper-period:5678}</reaper-period>
        </grouping-handler>


        <connector-services>
            <connector-service name="a">
                <factory-class>foo.bar</factory-class>
            </connector-service>
            <connector-service name="b">
                <factory-class>bar.foo</factory-class>
                <param key="foo" value="${connector.value:bar}"/>
                <param key="bar" value="2"/>
            </connector-service>
        </connector-services>

        <jms-connection-factories>
            <connection-factory name="InVmConnectionFactory">
                <connectors>
                    <connector-ref connector-name="in-vm"/>
                </connectors>
                <entries>
                    <entry name="${connection-factory.entries.entry:java:/ConnectionFactory}"/>
                </entries>
            </connection-factory>
            <connection-factory name="RemoteConnectionFactory">
                <factory-type>XA_QUEUE</factory-type>
                <connectors>
                    <connector-ref connector-name="netty"/>
                </connectors>
                <entries>
                    <entry name="RemoteConnectionFactory"/>
                </entries>
                <client-id>testClient</client-id>
            </connection-factory>
            <connection-factory name="otherConnectionFactory">
                <discovery-group-ref discovery-group-name="groupC"/>
                <entries>
                    <entry name="otherConnectionFactory"/>
                </entries>
                <ha>${ha:true}</ha>
                <client-failure-check-period>${client.failure.check.period:12345}</client-failure-check-period>
                <connection-ttl>${connection.ttl:56789}</connection-ttl>
                <call-timeout>${call.timeout:123}</call-timeout>
                <call-failover-timeout>${call.failover.timeout:456}</call-failover-timeout>
                <consumer-window-size>${consumer.window.size:456}</consumer-window-size>
                <consumer-max-rate>${consumer.max.rate:789}</consumer-max-rate>
                <confirmation-window-size>${confirmation.window.size:-1}</confirmation-window-size>
                <producer-window-size>${producer.window.size:-1}</producer-window-size>
                <producer-max-rate>${producer.max.rate:1024}</producer-max-rate>
                <compress-large-messages>${compress.large.messages:true}</compress-large-messages>
                <cache-large-message-client>${cache.large.message.client:false}</cache-large-message-client>
                <min-large-message-size>${min.large.message.size:2048}</min-large-message-size>
                <client-id>${client.id:myClientID}</client-id>
                <dups-ok-batch-size>${dups.ok.batch.size:256}</dups-ok-batch-size>
                <transaction-batch-size>${transaction.batch.size:512}</transaction-batch-size>
                <block-on-acknowledge>${block.on.acknowledge:false}</block-on-acknowledge>
                <block-on-non-durable-send>${block.on.non.durable.send:false}</block-on-non-durable-send>
                <block-on-durable-send>${block.on.durable.send:false}</block-on-durable-send>
                <auto-group>${auto.group:true}</auto-group>
                <pre-acknowledge>${pre.acknowledge:true}</pre-acknowledge>
                <retry-interval>${retry.interval:500}</retry-interval>
                <retry-interval-multiplier>${retry.interval.multiplier:2.5}</retry-interval-multiplier>
                <max-retry-interval>${max.retry.interval:10000}</max-retry-interval>
                <reconnect-attempts>${reconnect.attempts:2}</reconnect-attempts>
                <failover-on-initial-connection>${failover.on.initial.connection:true}</failover-on-initial-connection>
                <connection-load-balancing-policy-class-name>connection.load.balancy.policy.class</connection-load-balancing-policy-class-name>
                <use-global-pools>${use.global.pools:true}</use-global-pools>
                <scheduled-thread-pool-max-size>${scheduled.thread.pool.max.size:24}</scheduled-thread-pool-max-size>
                <thread-pool-max-size>${thread.pool.max.size:48}</thread-pool-max-size>
                <group-id>${group.id:myGroup}</group-id>
            </connection-factory>
            <pooled-connection-factory name="hornetq-ra">
                <inbound-config>
                    <use-jndi>${use.jndi:false}</use-jndi>
                    <jndi-params>${jndi.params:whatever}</jndi-params>
                    <use-local-tx>${use.local.tx:true}</use-local-tx>
                    <setup-attempts>${setup-attempts:123}</setup-attempts>
                    <setup-interval>${setup-interval:456}</setup-interval>
                </inbound-config>
                <transaction mode="${transaction:xa}"/>
                <user>${user:alice}</user>
                <password>${password:alicepassword}</password>
                <min-pool-size>${min.pool.size:42}</min-pool-size>
                <max-pool-size>${max.pool.size:242}</max-pool-size>
                <initial-message-packet-size>${initial.message.packet.size:9876}</initial-message-packet-size>
                <initial-connect-attempts>${initial.connect.attempts:5432}</initial-connect-attempts>
                <connectors>
                    <connector-ref connector-name="in-vm"/>
                </connectors>
                <entries>
                    <entry name="${pooled-connection-factory.entries.entry:java:/JmsXA}"/>
                </entries>
                <ha>${ha:true}</ha>
                <client-failure-check-period>${client.failure.check.period:12345}</client-failure-check-period>
                <connection-ttl>${connection.ttl:6789}</connection-ttl>
                <call-timeout>${call.timeout:123}</call-timeout>
                <call-failover-timeout>${call.failover.timeout:456}</call-failover-timeout>
                <consumer-window-size>${consumer.window.size:456}</consumer-window-size>
                <consumer-max-rate>${consumer.max.rate:789}</consumer-max-rate>
                <confirmation-window-size>${confirmation.window.size:-1}</confirmation-window-size>
                <producer-window-size>${producer.window.size:-1}</producer-window-size>
                <producer-max-rate>${producer.max.rate:1024}</producer-max-rate>
                <compress-large-messages>${compress.large.messages:true}</compress-large-messages>
                <cache-large-message-client>${cache.large.message.client:false}</cache-large-message-client>
                <min-large-message-size>${min.large.message.size:2048}</min-large-message-size>
                <client-id>${client.id:myClientID}</client-id>
                <dups-ok-batch-size>${dups.ok.batch.size:256}</dups-ok-batch-size>
                <transaction-batch-size>${transaction.batch.size:512}</transaction-batch-size>
                <block-on-acknowledge>${block.on.acknowledge:false}</block-on-acknowledge>
                <block-on-non-durable-send>${block.on.non.durable.send:false}</block-on-non-durable-send>
                <block-on-durable-send>${block.on.durable.send:false}</block-on-durable-send>
                <auto-group>${auto.group:true}</auto-group>
                <pre-acknowledge>${pre.acknowledge:true}</pre-acknowledge>
                <retry-interval>${retry.interval:500}</retry-interval>
                <retry-interval-multiplier>${retry.interval.multiplier:2.5}</retry-interval-multiplier>
                <max-retry-interval>${max.retry.interval:10000}</max-retry-interval>
                <reconnect-attempts>${reconnect.attempts:2}</reconnect-attempts>
                <failover-on-initial-connection>${failover.on.initial.connection:true}</failover-on-initial-connection>
                <connection-load-balancing-policy-class-name>connection.load.balancing.policy.class</connection-load-balancing-policy-class-name>
                <use-global-pools>${use.global.pools:true}</use-global-pools>
                <scheduled-thread-pool-max-size>${scheduled.thread.pool.max.size:24}</scheduled-thread-pool-max-size>
                <thread-pool-max-size>${thread.pool.max.size:48}</thread-pool-max-size>
                <group-id>${group.id:myGroup}</group-id>
            </pooled-connection-factory>
            <pooled-connection-factory name="hornetq-ra-local">
                <transaction mode="local"/>
                <user>alice</user>
                <password>alicepassword</password>
                <use-auto-recovery>${use.auto.recovery:true}</use-auto-recovery>
                <connectors>
                    <connector-ref connector-name="in-vm"/>
                </connectors>
                <entries>
                    <entry name="java:/JmsLocal"/>
                </entries>
            </pooled-connection-factory>
            <pooled-connection-factory name="hornetq-ra-none">
                <transaction mode="none"/>
                <user>alice</user>
                <password>alicepassword</password>
                <connectors>
                    <connector-ref connector-name="in-vm"/>
                </connectors>
                <entries>
                    <entry name="java:/JmsNone"/>
                </entries>
            </pooled-connection-factory>
        </jms-connection-factories>

        <jms-destinations>
            <jms-queue name="testQueue">
                <entry name="${jms-queue.entry:queue/test}"/>
                <selector string="${selector:color='red'}"/>
                <durable>${durable:true}</durable>
            </jms-queue>
            <jms-topic name="testTopic">
                <entry name="${jms-topic.entry:topic/test}"/>
            </jms-topic>
        </jms-destinations>
        -->
    </server>

    <server name="empty"/>

    <!--
    <jms-bridge>
        <source>
            <connection-factory name="/cf/sourceCF" />
            <destination name="/topic/anotherSourceTopic" />
        </source>
        <target>
            <connection-factory name="/cf/targetCF" />
            <destination name="anotherMQ/jms/queue/anotherTargetQueue" />
        </target>
        <quality-of-service>${quality.of.service:AT_MOST_ONCE}</quality-of-service>
        <failure-retry-interval>${failure.retry.interval:45678}</failure-retry-interval>
        <max-retries>${max.retries:7890}</max-retries>
        <max-batch-size>${max.batch.size:12345}</max-batch-size>
        <max-batch-time>${max.batch.time:10000}</max-batch-time>
    </jms-bridge>
    -->
</subsystem>
